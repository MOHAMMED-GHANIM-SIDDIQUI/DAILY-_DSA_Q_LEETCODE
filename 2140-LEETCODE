class Solution {
public:
    long long mostPoints(vector<vector<int>>& questions) {
        const int n = questions.size(); // Total number of questions
        vector<long> dp(n + 1, 0); // dp[i] will store the maximum points starting from question i

        // Process the questions from the last one to the first one
        for (int i = n - 1; i >= 0; --i) {
            const int points = questions[i][0]; // Points for the current question
            const int brainpower = questions[i][1]; // Number of questions to skip after this question
            const int nextIndex = i + brainpower + 1; // The index of the next question after skipping the brainpower questions

            // If nextIndex is within bounds, we take the points from the next question, otherwise 0
            const long nextPoints = nextIndex < n ? dp[nextIndex] : 0;

            // dp[i] = max points by either:
            // 1. Taking the current question's points + the points we can get from the next valid question
            // 2. Skipping the current question and taking the points starting from the next question
            dp[i] = max(points + nextPoints, dp[i + 1]);
        }

        // The answer is the maximum points starting from the first question (dp[0])
        return dp[0];
    }
};
