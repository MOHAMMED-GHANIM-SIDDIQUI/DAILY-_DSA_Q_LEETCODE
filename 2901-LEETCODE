#include <vector>
#include <string>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<string> getWordsInLongestSubsequence(vector<string>& words, vector<int>& groups) {
        int n = words.size();
        vector<int> dp(n, 1);       // dp[i]: length of longest valid subsequence ending at i
        vector<int> prev(n, -1);    // prev[i]: previous index in the subsequence

        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (groups[i] == groups[j]) continue;
                if (words[i].length() != words[j].length()) continue;
                if (hammingDist(words[i], words[j]) != 1) continue;
                if (dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                    prev[i] = j;
                }
            }
        }

        // Find the index with the maximum dp value
        int maxIndex = max_element(dp.begin(), dp.end()) - dp.begin();

        // Reconstruct the subsequence
        vector<string> result;
        while (maxIndex != -1) {
            result.push_back(words[maxIndex]);
            maxIndex = prev[maxIndex];
        }

        reverse(result.begin(), result.end());
        return result;
    }

private:
    int hammingDist(const string& s1, const string& s2) {
        int dist = 0;
        for (int i = 0; i < s1.length(); ++i) {
            if (s1[i] != s2[i]) ++dist;
        }
        return dist;
    }
};
