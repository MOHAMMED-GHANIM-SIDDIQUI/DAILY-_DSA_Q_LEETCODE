class Solution {
public:
    long long countInterestingSubarrays(vector<int>& nums, int modulo, int k) {
        unordered_map<int, long long> freq;
        freq[0] = 1;  // Starting with prefix sum 0

        long long ans = 0;
        int prefix = 0;
        
        for (int num : nums) {
            if (num % modulo == k) {
                prefix = (prefix + 1) % modulo;
            } else {
                prefix = prefix % modulo;
            }
            
            // Find how many previous prefixes match the needed one
            int target = (prefix - k + modulo) % modulo;
            ans += freq[target];
            
            freq[prefix]++;
        }
        
        return ans;
    }
};
