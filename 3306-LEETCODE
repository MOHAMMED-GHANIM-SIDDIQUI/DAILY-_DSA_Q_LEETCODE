class Solution {
public:
    // Count the number of substrings containing every vowel and at most k consonants
    long long countOfSubstrings(string word, int k) {
        // Substrings with at most k consonants minus those with at most (k-1) consonants
        return substringsWithAtMost(word, k) - substringsWithAtMost(word, k - 1);
    }

private:
    // Return the number of substrings containing every vowel with at most k consonants
    long substringsWithAtMost(const string& word, int k) {
        // If k is -1, no valid substring exists with a negative number of consonants
        if (k == -1) return 0;

        long res = 0;            // Result to store the number of valid substrings
        int vowels = 0;          // Count of vowels in the current window
        int uniqueVowels = 0;    // Count of unique vowels in the current window
        unordered_map<char, int> vowelLastSeen; // Track last seen positions of vowels

        // Sliding window technique (using two pointers l and r)
        for (int l = 0, r = 0; r < word.length(); ++r) {
            // If the current character is a vowel
            if (isVowel(word[r])) {
                ++vowels; // Increase the count of vowels in the window
                // If it's a new vowel or it's seen after the left pointer 'l', increase unique vowel count
                if (const auto it = vowelLastSeen.find(word[r]); it == vowelLastSeen.end() || it->second < l) {
                    ++uniqueVowels;
                }
                // Update the last seen position of the vowel
                vowelLastSeen[word[r]] = r;
            }

            // Shrink the window from the left until we have at most k consonants
            while (r - l + 1 - vowels > k) {
                if (isVowel(word[l])) {
                    --vowels; // Decrease the vowel count if we're removing a vowel
                    // If we removed the last occurrence of the vowel, decrease unique vowel count
                    if (vowelLastSeen[word[l]] == l) {
                        --uniqueVowels;
                    }
                }
                ++l; // Move the left pointer to the right
            }

            // If all 5 vowels are present in the current window
            if (uniqueVowels == 5) {
                // Add the number of valid substrings starting from l to r
                // Valid substrings are from word[l..r] to word[min(vowelLastSeen[vowel])..r]
                res += min({vowelLastSeen['a'], vowelLastSeen['e'], vowelLastSeen['i'],
                            vowelLastSeen['o'], vowelLastSeen['u']}) - l + 1;
            }
        }

        return res;
    }

    // Helper function to check if a character is a vowel
    bool isVowel(char c) {
        static constexpr string_view kVowels = "aeiou";
        return kVowels.find(c) != string_view::npos;
    }
};
